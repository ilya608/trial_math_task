Время: O(n * k * 2^k)
Память: O(n * 2 ^ n), т.к. ассимптотически больше всего памяти использует словарь
cnt_different_by_weight, а в нём суммарно не больше 2^n элементов будет, каждый
длиной <= n.

Можно оптимизировать время, ускорив операцию xor, например сжав все введенные
в массив чисел по 32 или 64 бит на число и работать с ним.
Это ускорит программу, т.к. битовые операции с числами будут быстрее.

P.S. попытался написать многопоточную версию, но она работает медленней, т.к.
нет времени разбираться и нет опыта работы с многопоточностью в питоне
, решил оставить как есть, но приложить файл :)